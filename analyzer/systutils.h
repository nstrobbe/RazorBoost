#include <vector>

#include "TH1F.h"
#include "TLorentzVector.h"

using namespace std;

// btag efficiencies and errors for FullSim:
void btagCSVLSFFull(int flavor, double pt, double eta, double& SFb, double& dSFb)
{

  const int n = 16;

  SFb = 0;
  dSFb = 0;
  double SFbmn = 0; 
  double SFbmx = 0;

  // pt bins:
  float _ptmin[n] = {20, 30, 40, 50, 60, 70, 80, 100, 120, 160, 210, 260, 320, 400, 500, 600};
  float _ptmax[n] = {30, 40, 50, 60, 70, 80, 100, 120, 160, 210, 260, 320, 400, 500, 600, 800};

  // btag for b jets
  if (abs(flavor) == 5) {
    double _SFb_error[n] = {
      0.033299,
      0.0146768,
      0.013803,
      0.0170145,
      0.0166976,
      0.0137879,
      0.0149072,
      0.0153068,
      0.0133077,  
      0.0123737,
      0.0157152,
      0.0175161,
      0.0209241,
      0.0278605,
      0.0346928,
      0.0350099 };

    if (pt >= 20 and pt <= 800) {
      SFb = 0.997942*((1.+(0.00923753*pt))/(1.+(0.0096119*pt)));
      for (int i=0; i<n; i++) {
	if (pt >= _ptmin[i] and pt < _ptmax[i]) {
	  dSFb = _SFb_error[i];
	}
      }
    } else if (pt < 20) {
      pt = 20;
      SFb = 0.997942*((1.+(0.00923753*pt))/(1.+(0.0096119*pt)));
      dSFb = 2.*_SFb_error[0];
    } else if (pt > 800) {
      pt = 800;
      SFb = 0.997942*((1.+(0.00923753*pt))/(1.+(0.0096119*pt)));
      dSFb = 2.*_SFb_error[n-1];
    }
  } 
  // light jets
  else {
    double x = pt;
    if (pt < 20) x = 20;
    if (pt > 800) x = 800;
    if (eta >= 0.0 and eta < 0.5) {
      SFb = ((1.01177+(0.0023066*x))+(-4.56052e-06*(x*x)))+(2.57917e-09*(x*(x*x)));
      SFbmn = ((0.977761+(0.00170704*x))+(-3.2197e-06*(x*x)))+(1.78139e-09*(x*(x*x)));
      SFbmx = ((1.04582+(0.00290226*x))+(-5.89124e-06*(x*x)))+(3.37128e-09*(x*(x*x)));

    } else if (eta >= 0.5 and eta < 1.0) {
      SFb = ((0.975966+(0.00196354*x))+(-3.83768e-06*(x*x)))+(2.17466e-09*(x*(x*x)));
      SFbmn = ((0.945135+(0.00146006*x))+(-2.70048e-06*(x*x)))+(1.4883e-09*(x*(x*x)));
      SFbmx = ((1.00683+(0.00246404*x))+(-4.96729e-06*(x*x)))+(2.85697e-09*(x*(x*x)));
    } else if (eta >= 1.0 and eta < 1.5) {
      SFb = ((0.93821+(0.00180935*x))+(-3.86937e-06*(x*x)))+(2.43222e-09*(x*(x*x)));
      SFbmn = ((0.911657+(0.00142008*x))+(-2.87569e-06*(x*x)))+(1.76619e-09*(x*(x*x)));
      SFbmx = ((0.964787+(0.00219574*x))+(-4.85552e-06*(x*x)))+(3.09457e-09*(x*(x*x)));
    } else {
      SFb = ((1.00022+(0.0010998*x))+(-3.10672e-06*(x*x)))+(2.35006e-09*(x*(x*x)));
      SFbmn = ((0.970045+(0.000862284*x))+(-2.31714e-06*(x*x)))+(1.68866e-09*(x*(x*x)));
      SFbmx = ((1.03039+(0.0013358*x))+(-3.89284e-06*(x*x)))+(3.01155e-09*(x*(x*x)));
    }
    dSFb = (SFbmx - SFbmn) / 2.;

  }

  
}


void btagCSVMSFFull(int flavor, double pt, double eta, double& SFb, double& dSFb)
{

  const int n = 16;

  SFb = 0;
  dSFb = 0;
  double SFbmn = 0; 
  double SFbmx = 0;
  
  // pt bins:
  float _ptmin[n] = {20, 30, 40, 50, 60, 70, 80, 100, 120, 160, 210, 260, 320, 400, 500, 600};
  float _ptmax[n] = {30, 40, 50, 60, 70, 80, 100, 120, 160, 210, 260, 320, 400, 500, 600, 800};

  // btag for b jets
  if (abs(flavor) == 5) {
    double _SFb_error[n] = {
      0.0415707,
      0.0204209,
      0.0223227,
      0.0206655,
      0.0199325,
      0.0174121,
      0.0202332,
      0.0182446,
      0.0159777,
      0.0218531,
      0.0204688,
      0.0265191,
      0.0313175,
      0.0415417,
      0.0740446,
      0.0596716 };

    if (pt >= 20 and pt <= 800) {
      SFb = (0.938887+(0.00017124*pt))+(-2.76366e-07*(pt*pt));
      for (int i=0; i<n; i++) {
	if (pt >= _ptmin[i] and pt < _ptmax[i]) {
	  dSFb = _SFb_error[i];
	}
      }
    } else if (pt < 20) {
      pt = 20;
      SFb = (0.938887+(0.00017124*pt))+(-2.76366e-07*(pt*pt));
      dSFb = 2.*_SFb_error[0];
    } else if (pt > 800) {
      pt = 800;
      SFb = (0.938887+(0.00017124*pt))+(-2.76366e-07*(pt*pt));
      dSFb = 2.*_SFb_error[n-1];
    }
  }
  // light jets
  else {
    double x = pt;
    if (pt < 20) x = 20;
    if (pt > 800) x = 800;
    if (eta >= 0.0 and eta < 0.8) {
      SFb = ((1.07541+(0.00231827*x))+(-4.74249e-06*(x*x)))+(2.70862e-09*(x*(x*x)));
      SFbmn = ((0.964527+(0.00149055*x))+(-2.78338e-06*(x*x)))+(1.51771e-09*(x*(x*x)));
      SFbmx = ((1.18638+(0.00314148*x))+(-6.68993e-06*(x*x)))+(3.89288e-09*(x*(x*x)));

    } else if (eta >= 0.8 and eta < 1.6) {
      SFb = ((1.05613+(0.00114031*x))+(-2.56066e-06*(x*x)))+(1.67792e-09*(x*(x*x)));
      SFbmn = ((0.946051+(0.000759584*x))+(-1.52491e-06*(x*x)))+(9.65822e-10*(x*(x*x)));
      SFbmx = ((1.16624+(0.00151884*x))+(-3.59041e-06*(x*x)))+(2.38681e-09*(x*(x*x)));
    } else {
      SFb = ((1.05625+(0.000487231*x))+(-2.22792e-06*(x*x)))+(1.70262e-09*(x*(x*x)));
      SFbmn = ((0.956736+(0.000280197*x))+(-1.42739e-06*(x*x)))+(1.0085e-09*(x*(x*x)));
      SFbmx = ((1.15575+(0.000693344*x))+(-3.02661e-06*(x*x)))+(2.39752e-09*(x*(x*x)));
    }
    dSFb = (SFbmx - SFbmn) / 2.;

  }
  
}



// btag efficiencies and errors for FastSim for CSVL:
void btagCSVLSFFast(int flavor, double pt, double eta, double& SFb, double& dSFb)
{

  const int n = 16;

  SFb = 0;
  dSFb = 0;
  
  // pt bins:

  float _ptmin[n] = {20, 30, 40, 50, 60, 70, 80, 100, 120, 160, 210, 260, 320, 400, 500, 600};
  float _ptmax[n] = {30, 40, 50, 60, 70, 80, 100, 120, 160, 210, 260, 320, 400, 500, 600, 800};

  // btag for truth b jets
  if (abs(flavor) == 5) {

    double _CF_b_average[] = {
      0.993664503098, 
      0.997118413448, 
      1.00000858307, 
      0.998138427734, 
      0.997954726219, 
      1.0033249855, 
      0.999196231365, 
      0.999721825123, 
      0.998062431812, 
      0.993349373341, 
      0.988520681858, 
      0.981488585472, 
      0.972151458263, 
      0.960148274899, 
      0.935311257839, 
      0.961525201797 };
    double _CF_b_average_err[] = {
      0.0109568009058, 
      0.00892906831917, 
      0.0087851305153, 
      0.00972810529415, 
      0.0115671651123, 
      0.0055218422074, 
      0.00654383727116, 
      0.0048027365678, 
      0.0053438270671, 
      0.00705538379872, 
      0.00924561697373, 
      0.0118125740901, 
      0.0161247628532, 
      0.0213089441994, 
      0.0257657699383, 
      0.0710000594278 };


    if (pt >= 20 and pt <= 800) {
      for (int i=0; i<n; i++) {
	if (pt >= _ptmin[i] and pt < _ptmax[i]) {
	  SFb = _CF_b_average[i];
	  dSFb = _CF_b_average_err[i];
	}
      }
    } else if (pt < 20) {
      pt = 20;
      SFb = _CF_b_average[0];
      dSFb = 2.*_CF_b_average_err[0];
    } else if (pt > 800) {
      pt = 800;
      SFb = _CF_b_average[0];
      dSFb = 2.*_CF_b_average_err[n-1];
    }
       
  } 
  // b mistag for truth c jets
  else if (abs(flavor) == 4) {

    double _CF_c_average[] = {
      0.984478831291, 
      0.987717688084, 
      1.00405836105, 
      0.998263418674, 
      1.00784921646, 
      1.0102981329, 
      1.01865899563, 
      1.01091706753, 
      1.01194953918, 
      1.000857234, 
      1.00599002838, 
      0.990680754185, 
      0.982108235359, 
      0.96217083931, 
      0.977991938591, 
      1.03476846218 };
    double _CF_c_average_err[] = {
      0.00100927514392, 
      0.00617611760766, 
      0.0130610319109, 
      0.00797113489247, 
      0.0120932482521, 
      0.0140709531737, 
      0.00682625764897, 
      0.00632568642574, 
      0.00959128912161, 
      0.0085168268945, 
      0.0186160023091, 
      0.0253776907935, 
      0.0101710517903, 
      0.0225251829717, 
      0.0209085208682, 
      0.229993369164 };

    if (pt >= 20 and pt <= 800) {
      for (int i=0; i<n; i++) {
	if (pt >= _ptmin[i] and pt < _ptmax[i]) {
	  SFb = _CF_c_average[i];
	  dSFb = _CF_c_average_err[i];
	}
      }
    } else if (pt < 20) {
      pt = 20;
      SFb = _CF_c_average[0];
      dSFb = 2.*_CF_c_average_err[0];
    } else if (pt > 800) {
      pt = 800;
      SFb = _CF_c_average[0];
      dSFb = 2.*_CF_c_average_err[n-1];
    }
       
  } 
  // b mistag for truth ucsg jets
  else {
    // for |eta| < 1.2
    if (fabs(eta) < 1.2) {
      double _CF_Cen_l_average[] = {
	0.671931028366, 
	0.788472294807, 
	0.965046703815, 
	1.05972146988, 
	1.13163208961, 
	1.13900196552, 
	1.12332582474, 
	1.13785779476, 
	1.16931283474, 
	1.13694798946, 
	1.1905798912, 
	1.21016633511, 
	1.25385832787, 
	1.31020259857, 
	1.5478143692, 
	1.58263671398 };
      double _CF_Cen_l_average_err[] = {
	0.293519939614, 
	0.213324542145, 
	0.181800000289, 
	0.0950938090648, 
	0.0847383043262, 
	0.0910949511445, 
	0.111109152659, 
	0.118146468813, 
	0.127213063032, 
	0.124779153939, 
	0.113078557908, 
	0.143404246919, 
	0.17744898108, 
	0.206663361067, 
	0.385719879854, 
	0.56688559583 };

      if (pt >= 20 and pt <= 800) {
	for (int i=0; i<n; i++) {
	  if (pt >= _ptmin[i] and pt < _ptmax[i]) {
	    SFb = _CF_Cen_l_average[i];
	    dSFb = _CF_Cen_l_average_err[i];
	  }
	}
      } else if (pt < 20) {
	pt = 20;
	SFb = _CF_Cen_l_average[0];
	dSFb = 2.*_CF_Cen_l_average_err[0];
      } else if (pt > 800) {
	pt = 800;
	SFb = _CF_Cen_l_average[0];
	dSFb = 2.*_CF_Cen_l_average_err[n-1];
      }
    }
    // for |eta| > 1.2
    else {
      double _CF_For_l_average[] = {
	0.953250348568, 
	1.03656172752, 
	1.12568819523, 
	1.13641119003, 
	1.15979087353, 
	1.1981549263, 
	1.22276306152, 
	1.27178037167, 
	1.31978642941, 
	1.34248173237, 
	1.42129004002, 
	1.49918079376, 
	1.6518008709, 
	1.75768911839, 
	2.13973045349, 
	2.4918756485 };
      double _CF_For_l_average_err[] = {
	0.0810352190615, 
	0.0108613404341, 
	0.0367269473303, 
	0.0405540015577, 
	0.0930149619733, 
	0.0804350988011, 
	0.0973195514871, 
	0.10021503023, 
	0.115361770021, 
	0.0937639867599, 
	0.167282870832, 
	0.192629144176, 
	0.128604390327, 
	0.561947314569, 
	0.294883413706, 
	1.34718663512 };

      if (pt >= 20 and pt <= 800) {
	for (int i=0; i<n; i++) {
	  if (pt >= _ptmin[i] and pt < _ptmax[i]) {
	    SFb = _CF_For_l_average[i];
	    dSFb = _CF_For_l_average_err[i];
	  }
	}
      } else if (pt < 20) {
	pt = 20;
	SFb = _CF_For_l_average[0];
	dSFb = 2.*_CF_For_l_average_err[0];
      } else if (pt > 800) {
	pt = 800;
	SFb = _CF_For_l_average[0];
	dSFb = 2.*_CF_For_l_average_err[n-1];
      }

    }

  } 

  
}




// btag efficiencies and errors for FastSim for CSVM:
void btagCSVMSFFast(int flavor, double pt, double eta, double& SFb, double& dSFb)
{

  const int n = 16;

  SFb = 0;
  dSFb = 0;
  
  // pt bins:

  float _ptmin[n] = {20, 30, 40, 50, 60, 70, 80, 100, 120, 160, 210, 260, 320, 400, 500, 600};
  float _ptmax[n] = {30, 40, 50, 60, 70, 80, 100, 120, 160, 210, 260, 320, 400, 500, 600, 800};

  // btag for truth b jets
  if (abs(flavor) == 5) {
    double _CF_b_average[n] = {
      0.962733864784, 
      0.970573425293, 
      0.98256868124, 
      0.989266812801, 
      0.987689971924, 
      0.998923659325, 
      0.991679012775, 
      0.9940969944, 
      0.989295661449, 
      0.981353878975, 
      0.967669308186, 
      0.95040678978, 
      0.928928077221, 
      0.906944334507, 
      0.876945734024, 
      0.917767047882 };
    double _CF_b_average_err[n] = {
      0.0260181701607, 
      0.0154812762734, 
      0.0153789442342, 
      0.0154847986653, 
      0.0135714074905, 
      0.0227187471548, 
      0.0129734739108, 
      0.0136435077109, 
      0.0148713548589, 
      0.01840957401, 
      0.0199149180981, 
      0.0228957179877, 
      0.0314412307726, 
      0.033912027676, 
      0.057451031885, 
      0.123532166482 };

    if (pt >= 20 and pt <= 800) {
      for (int i=0; i<n; i++) {
	if (pt >= _ptmin[i] and pt < _ptmax[i]) {
	  SFb = _CF_b_average[i];
	  dSFb = _CF_b_average_err[i];
	}
      }
    } else if (pt < 20) {
      pt = 20;
      SFb = _CF_b_average[0];
      dSFb = 2.*_CF_b_average_err[0];
    } else if (pt > 800) {
      pt = 800;
      SFb = _CF_b_average[0];
      dSFb = 2.*_CF_b_average_err[n-1];
    }
       
  } 
  // b mistag for truth c jets
  else if (abs(flavor) == 4) {

    double _CF_c_average[] = {
      0.938704848289, 
      0.954210639, 
      0.961997866631, 
      0.958955943584, 
      0.977162599564, 
      0.973846018314, 
      0.991183340549, 
      0.967045485973, 
      0.962050676346, 
      0.9363104105, 
      0.921064794064, 
      0.908532738686, 
      0.87743806839, 
      0.843527078629, 
      0.855088531971, 
      0.844529688358 };
    double _CF_c_average_err[] = {
      0.0178243611071, 
      0.0099687242946, 
      0.00431298538482, 
      0.00708289900002, 
      0.00751513533748, 
      0.01417955544, 
      0.0221240581063, 
      0.0196358629174, 
      0.0223272080895, 
      0.0292267866889, 
      0.049254188277, 
      0.0442623633286, 
      0.0574511872067, 
      0.0575143699322, 
      0.10258407115, 
      0.163447093603 };

    if (pt >= 20 and pt <= 800) {
      for (int i=0; i<n; i++) {
	if (pt >= _ptmin[i] and pt < _ptmax[i]) {
	  SFb = _CF_c_average[i];
	  dSFb = _CF_c_average_err[i];
	}
      }
    } else if (pt < 20) {
      pt = 20;
      SFb = _CF_c_average[0];
      dSFb = 2.*_CF_c_average_err[0];
    } else if (pt > 800) {
      pt = 800;
      SFb = _CF_c_average[0];
      dSFb = 2.*_CF_c_average_err[n-1];
    }
       
  } 
  // b mistag for truth ucsg jets
  else {
    // for |eta| < 1.2
    if (fabs(eta) < 1.2) {
      double _CF_Cen_l_average[] = {
	0.682043075562, 
	0.821280837059, 
	0.967660665512, 
	1.05402135849, 
	1.12585055828, 
	1.13137996197, 
	1.09406352043, 
	1.14267456532, 
	1.16305410862, 
	1.14481532574, 
	1.19965064526, 
	1.22156500816, 
	1.19697093964, 
	1.29652225971, 
	1.6358757019, 
	1.73088300228 };
      double _CF_Cen_l_average_err[] = {
	0.313594245172, 
	0.243365835432, 
	0.193255801213, 
	0.083380682087, 
	0.0845506053194, 
	0.0778296065823, 
	0.115759651647, 
	0.117455453234, 
	0.137607281912, 
	0.169691254585, 
	0.263406722305, 
	0.140874601242, 
	0.172364106509, 
	0.22326610247, 
	0.475978342234, 
	1.10186611303 };

      if (pt >= 20 and pt <= 800) {
	for (int i=0; i<n; i++) {
	  if (pt >= _ptmin[i] and pt < _ptmax[i]) {
	    SFb = _CF_Cen_l_average[i];
	    dSFb = _CF_Cen_l_average_err[i];
	  }
	}
      } else if (pt < 20) {
	pt = 20;
	SFb = _CF_Cen_l_average[0];
	dSFb = 2.*_CF_Cen_l_average_err[0];
      } else if (pt > 800) {
	pt = 800;
	SFb = _CF_Cen_l_average[0];
	dSFb = 2.*_CF_Cen_l_average_err[n-1];
      }
    }
    // for |eta| > 1.2
    else {
      double _CF_For_l_average[] = {
	0.998093605042, 
	1.08850896358, 
	1.20118439198, 
	1.17004549503, 
	1.19409108162, 
	1.16723918915, 
	1.30341672897, 
	1.34792208672, 
	1.36953449249, 
	1.39564085007, 
	1.55918598175, 
	1.67829239368, 
	1.76160264015, 
	1.99361467361, 
	2.87041759491, 
	4.02351331711 };
      double _CF_For_l_average_err[] = {
	0.086743769991, 
	0.0289869607314, 
	0.07555277158, 
	0.0735421875418, 
	0.0754685076621, 
	0.166280741806, 
	0.0313040218325, 
	0.1082575366, 
	0.142611842899, 
	0.195393123002, 
	0.272610317951, 
	0.235091859049, 
	0.153531150317, 
	0.620904746043, 
	2.57960480237, 
	1.08894797132 };

      if (pt >= 20 and pt <= 800) {
	for (int i=0; i<n; i++) {
	  if (pt >= _ptmin[i] and pt < _ptmax[i]) {
	    SFb = _CF_For_l_average[i];
	    dSFb = _CF_For_l_average_err[i];
	  }
	}
      } else if (pt < 20) {
	pt = 20;
	SFb = _CF_For_l_average[0];
	dSFb = 2.*_CF_For_l_average_err[0];
      } else if (pt > 800) {
	pt = 800;
	SFb = _CF_For_l_average[0];
	dSFb = 2.*_CF_For_l_average_err[n-1];
      }

    }

  } 

  
}


// loose eleectron SFs and errors for FullSim:
void eleLooseSFEFull(double pt, double eta, double& SFe, double& dSFe)
{

  const int npt = 8;
  const int neta = 5;

  // pt bins:
  double _ptmin[npt] = {5., 10., 15., 20., 30., 40., 50., 200.};
  double _ptmax[npt] = {10., 15., 20., 30., 40., 50., 200., 500.};

  float _etamin[neta] = {0., 0.8, 1.442, 1.556, 2.0};
  float _etamax[neta] = {0.8, 1.442, 1.556, 2.0, 2.5};

  // SF and errors for electrons:

  double _SFe[neta][npt] = {
    {0.865, 0.865, 0.958, 0.988, 1.002, 1.005, 1.005, 1.005}, 
    {0.967, 0.967, 0.971, 0.965, 0.985, 0.989, 0.989, 0.989},
    {1.064, 1.064, 0.902, 0.990, 0.966, 0.971, 0.980, 0.980},
    {0.939, 0.939, 0.897, 0.953, 0.980, 0.999, 1.004, 1.004},
    {1.050, 1.050, 0.941, 1.017, 1.019, 1.019, 1.019, 1.023}
  };

  double _SFe_error[neta][npt] = {
    {0.021, 0.021, 0.009, 0.002, 0.001, 0.001, 0.001, 0.001},
    {0.020, 0.020, 0.010, 0.003, 0.001, 0.001, 0.002, 0.002},
    {0.0975, 0.0975, 0.034, 0.011, 0.005, 0.004, 0.008, 0.008},
    {0.039, 0.039, 0.016, 0.005, 0.003, 0.002, 0.003, 0.003},
    {0.019, 0.019, 0.017, 0.005, 0.003, 0.002, 0.004, 0.004}
  };

  int ipt = 0;
  int ieta = 0;
  for (int i=0; i<npt; i++) {
    if (pt >= _ptmin[i] && pt < _ptmax[i]) {
      ipt = i;
      break;
    }
  }
  for (int i=0; i<neta; i++) {
    if (eta >= _etamin[i] && eta < _etamax[i]) {
      ieta = i;
      break;
    }
  }

  SFe = _SFe[ieta][ipt];
  dSFe = _SFe_error[ieta][ipt];

}


// Y tag SFs and SF errors:
void YSFEFull(double pt, double& SF, double& dSF)
{
  const int npt = 13;

  // pt bins:
  double _ptmin[npt] = {0.,180.,220.,240.,260.,280.,300.,320.,340.,360.,380.,400.,500.};
  double _ptmax[npt] = {180.,220.,240.,260.,280.,300.,320.,340.,360.,380.,400.,500.,3000.};

  // SF and errors for Ys:
  double _SF[npt] = {1.5, 1.18, 1.16, 1.23, 1.26, 1.28, 1.12, 1.17, 1.27, 1.33, 1.35, 1.34, 1.37};
  double _SF_error[npt] = {0.8, 0.06, 0.04, 0.03, 0.03, 0.03, 0.02, 0.03, 0.02, 0.03, 0.04, 0.02, 0.02};

  int ipt = 0;
  for (int i=0; i<npt; i++) {
    if (pt >= _ptmin[i] && pt < _ptmax[i]) {
      ipt = i;
      break;
    }
  }

  SF = _SF[ipt];
  dSF = _SF_error[ipt];  

}

// W fake SFs and SF errors:
void WFakeSFEFull(double pt, double& SF, double& dSF)
{
  const int npt = 14;

  // pt bins:
  double _ptmin[npt] = {0.,180.,200.,220.,240.,260.,280.,300.,320.,340.,360.,380.,400.,500.};
  double _ptmax[npt] = {180.,200.,220.,240.,260.,280.,300.,320.,340.,360.,380.,400.,500.,3000.};

  // SF and errors for Ys:
  //double _SF[npt] = {0.78, 0.84, 1.05, 1.01, 1.15, 1.15, 1.14, 1.02, 1.13, 1.16, 1.18, 1.18, 1.15, 1.18};
  //double _SF_error[npt] = {0.69, 0.17, 0.07, 0.04, 0.04 ,0.03, 0.03, 0.02 ,0.02, 0.02, 0.03, 0.03, 0.02, 0.02};
  double _SF[npt] = {1.7, 0.84, 1.06, 0.98, 1.17, 1.17, 1.14, 1.04, 1.15, 1.17, 1.18, 1.16, 1.15, 1.17};
  double _SF_error[npt] = {1.5, 0.18, 0.08, 0.05, 0.04, 0.03, 0.03, 0.02, 0.02, 0.02, 0.03, 0.04, 0.02, 0.02};

  int ipt = 0;
  for (int i=0; i<npt; i++) {
    if (pt >= _ptmin[i] && pt < _ptmax[i]) {
      ipt = i;
      break;
    }
  }

  SF = _SF[ipt];
  dSF = _SF_error[ipt];  

}


// aW tag SFs and SF errors:
void aWSFEFull(double pt, double& SF, double& dSF)
{
  const int npt = 13;

  // pt bins:
  double _ptmin[npt] = {0.,180.,220.,240.,260.,280.,300.,320.,340.,360.,380.,400.,500.};
  double _ptmax[npt] = {180.,220.,240.,260.,280.,300.,320.,340.,360.,380.,400.,500.,3000.};

  // SF and errors for Ys:
  double _SF[npt] = {1.6, 1.28, 1.23, 1.28, 1.35, 1.41, 1.22, 1.23, 1.39, 1.46, 1.49, 1.50, 1.51};
  double _SF_error[npt] = {1.1, 0.10, 0.05, 0.04, 0.03, 0.04, 0.03, 0.03, 0.03, 0.03, 0.04, 0.03, 0.02};

  int ipt = 0;
  for (int i=0; i<npt; i++) {
    if (pt >= _ptmin[i] && pt < _ptmax[i]) {
      ipt = i;
      break;
    }
  }

  SF = _SF[ipt];
  dSF = _SF_error[ipt];  

}


// W tag Fastsim SFs and SF errors:
void WSFEFast(double pt, double& SF, double& dSF)
{
  const int npt = 6;

  // pt bins:
  double _ptmin[npt] = {0., 100., 150., 200., 250., 300.};
  double _ptmax[npt] = {100., 150., 200., 250., 300., 4000.};

  // SF and errors for Ws:
  double _SF[npt] = {1.352, 1.352, 1.267, 1.210, 1.074, 1.066};
  double _SF_error[npt] = {0.175, 0.175, 0.020, 0.013, 0.014, 0.015};

  int ipt = 0;
  for (int i=0; i<npt; i++) {
    if (pt >= _ptmin[i] && pt < _ptmax[i]) {
      ipt = i;
      break;
    }
  }

  SF = _SF[ipt];
  dSF = _SF_error[ipt];  

}



// JEC unc from Summer13_V5_MC_Uncertainty_AK5PFchs.txt :
void AK5PFCHSJECunc(double pt, double eta, double& jecUnc)
{

  const int npt = 44;
  const int neta = 40;

  double _etamin[neta] = {
    -5.4,
    -5.0,
    -4.4,
    -4.0,
    -3.5,
    -3.0,
    -2.8,
    -2.6,
    -2.4,
    -2.2,
    -2.0,
    -1.8,
    -1.6,
    -1.4,
    -1.2,
    -1.0,
    -0.8,
    -0.6,
    -0.4,
    -0.2,
    0.0,
    0.2,
    0.4,
    0.6,
    0.8,
    1.0,
    1.2,
    1.4,
    1.6,
    1.8,
    2.0,
    2.2,
    2.4,
    2.6,
    2.8,
    3.0,
    3.5,
    4.0,
    4.4,
    5.0
  };

  double _etamax[neta] = {
    -5.0,
    -4.4,
    -4.0,
    -3.5,
    -3.0,
    -2.8,
    -2.6,
    -2.4,
    -2.2,
    -2.0,
    -1.8,
    -1.6,
    -1.4,
    -1.2,
    -1.0,
    -0.8,
    -0.6,
    -0.4,
    -0.2,
    0.0,
    0.2,
    0.4,
    0.6,
    0.8,
    1.0,
    1.2,
    1.4,
    1.6,
    1.8,
    2.0,
    2.2,
    2.4,
    2.6,
    2.8,
    3.0,
    3.5,
    4.0,
    4.4,
    5.0,
    5.4
  };

  double _ptmin[npt] = {
    9.0,
    11.0,
    13.5,
    16.5,
    19.5,
    22.5,
    26.0,
    30.0,
    34.5,
    40.0,
    46.0,
    52.5,
    60.0,
    69.0,
    79.0,
    90.5,
    105.5,
    123.5,
    143.0,
    163.5,
    185.0,
    208.0,
    232.5,
    258.5,
    286.0,
    331.0,
    396.0,
    468.5,
    549.5,
    639.0,
    738.0,
    847.5,
    968.5,
    1102.0,
    1249.5,
    1412.0,
    1590.5,
    1787.0,
    1945.0,
    2119.0,
    2369.0,
    2643.5,
    2945.0,
    3276.5
  };

  double _ptmax[npt] = {
    11.0,
    13.5,
    16.5,
    19.5,
    22.5,
    26.0,
    30.0,
    34.5,
    40.0,
    46.0,
    52.5,
    60.0,
    69.0,
    79.0,
    90.5,
    105.5,
    123.5,
    143.0,
    163.5,
    185.0,
    208.0,
    232.5,
    258.5,
    286.0,
    331.0,
    396.0,
    468.5,
    549.5,
    639.0,
    738.0,
    847.5,
    968.5,
    1102.0,
    1249.5,
    1412.0,
    1590.5,
    1787.0,
    1945.0,
    2119.0,
    2369.0,
    2643.5,
    2945.0,
    3276.5,
    5000.
  };

  double _jecUnc[neta][npt] = {
    {0.0466,0.0460,0.0455,0.0450,0.0448,0.0445,0.0443,0.0442,0.0435,0.0429,0.0424,0.0421,0.0418,0.0415,0.0413,0.0411,0.0409,0.0408,0.0407,0.0406,0.0405,0.0404,0.0404,0.0404,0.0404,0.0403,0.0403,0.0403,0.0403,0.0404,0.0404,0.0404,0.0405,0.0405,0.0406,0.0406,0.0407,0.0408,0.0408,0.0408,0.0409,0.0409,0.0410,0.0410},
    {0.0459,0.0455,0.0451,0.0448,0.0446,0.0444,0.0442,0.0441,0.0434,0.0428,0.0423,0.0412,0.0388,0.0369,0.0362,0.0360,0.0358,0.0356,0.0355,0.0354,0.0353,0.0353,0.0352,0.0352,0.0352,0.0351,0.0351,0.0351,0.0351,0.0352,0.0352,0.0353,0.0353,0.0354,0.0354,0.0355,0.0356,0.0356,0.0357,0.0357,0.0358,0.0358,0.0359,0.0359},
    {0.0468,0.0461,0.0455,0.0451,0.0448,0.0445,0.0443,0.0442,0.0435,0.0428,0.0424,0.0413,0.0389,0.0369,0.0358,0.0354,0.0360,0.0374,0.0373,0.0372,0.0371,0.0371,0.0370,0.0370,0.0370,0.0369,0.0369,0.0369,0.0370,0.0370,0.0370,0.0371,0.0371,0.0372,0.0372,0.0373,0.0373,0.0374,0.0375,0.0375,0.0375,0.0376,0.0376,0.0377},
    {0.0573,0.0536,0.0507,0.0485,0.0472,0.0464,0.0457,0.0452,0.0442,0.0434,0.0428,0.0416,0.0391,0.0372,0.0360,0.0355,0.0361,0.0380,0.0382,0.0381,0.0380,0.0379,0.0379,0.0378,0.0378,0.0378,0.0378,0.0378,0.0378,0.0378,0.0379,0.0379,0.0379,0.0380,0.0381,0.0381,0.0382,0.0382,0.0383,0.0383,0.0384,0.0384,0.0385,0.0385},
    {0.0557,0.0494,0.0441,0.0401,0.0375,0.0358,0.0344,0.0333,0.0317,0.0303,0.0292,0.0283,0.0275,0.0269,0.0263,0.0258,0.0254,0.0250,0.0248,0.0246,0.0245,0.0245,0.0245,0.0244,0.0244,0.0243,0.0243,0.0243,0.0243,0.0244,0.0244,0.0245,0.0246,0.0246,0.0247,0.0248,0.0249,0.0250,0.0251,0.0251,0.0252,0.0253,0.0253,0.0254},
    {0.0328,0.0319,0.0311,0.0305,0.0301,0.0298,0.0295,0.0293,0.0282,0.0273,0.0266,0.0260,0.0253,0.0246,0.0241,0.0236,0.0231,0.0228,0.0225,0.0223,0.0223,0.0222,0.0222,0.0223,0.0224,0.0225,0.0225,0.0225,0.0225,0.0226,0.0226,0.0227,0.0228,0.0229,0.0230,0.0231,0.0232,0.0233,0.0233,0.0234,0.0235,0.0236,0.0236,0.0237},
    {0.0424,0.0382,0.0347,0.0321,0.0305,0.0294,0.0285,0.0278,0.0263,0.0250,0.0240,0.0230,0.0215,0.0199,0.0185,0.0172,0.0159,0.0148,0.0139,0.0132,0.0129,0.0127,0.0126,0.0128,0.0130,0.0136,0.0146,0.0152,0.0153,0.0153,0.0154,0.0155,0.0156,0.0158,0.0159,0.0160,0.0162,0.0163,0.0164,0.0165,0.0166,0.0167,0.0169,0.0170},
    {0.0545,0.0486,0.0432,0.0390,0.0362,0.0343,0.0327,0.0313,0.0294,0.0278,0.0265,0.0251,0.0233,0.0215,0.0198,0.0182,0.0166,0.0152,0.0140,0.0132,0.0126,0.0123,0.0122,0.0122,0.0124,0.0130,0.0141,0.0150,0.0155,0.0158,0.0159,0.0160,0.0161,0.0162,0.0163,0.0164,0.0166,0.0167,0.0168,0.0169,0.0170,0.0171,0.0172,0.0174},
    {0.0326,0.0305,0.0285,0.0268,0.0256,0.0247,0.0239,0.0232,0.0215,0.0199,0.0187,0.0176,0.0164,0.0152,0.0141,0.0131,0.0121,0.0111,0.0103,0.0096,0.0091,0.0087,0.0085,0.0083,0.0081,0.0081,0.0083,0.0086,0.0091,0.0094,0.0095,0.0097,0.0098,0.0100,0.0102,0.0104,0.0107,0.0109,0.0110,0.0112,0.0113,0.0115,0.0117,0.0118},
    {0.0269,0.0258,0.0247,0.0238,0.0231,0.0226,0.0222,0.0218,0.0203,0.0189,0.0178,0.0168,0.0157,0.0146,0.0136,0.0126,0.0116,0.0107,0.0099,0.0093,0.0088,0.0084,0.0081,0.0079,0.0077,0.0077,0.0078,0.0081,0.0086,0.0091,0.0096,0.0100,0.0102,0.0104,0.0106,0.0108,0.0110,0.0112,0.0114,0.0115,0.0117,0.0118,0.0120,0.0121},
    {0.0235,0.0227,0.0219,0.0212,0.0207,0.0204,0.0200,0.0197,0.0181,0.0166,0.0154,0.0145,0.0135,0.0126,0.0118,0.0109,0.0101,0.0093,0.0086,0.0081,0.0077,0.0073,0.0071,0.0068,0.0067,0.0066,0.0065,0.0067,0.0069,0.0071,0.0075,0.0078,0.0080,0.0082,0.0085,0.0087,0.0090,0.0092,0.0094,0.0096,0.0098,0.0100,0.0102,0.0103},
    {0.0241,0.0233,0.0225,0.0218,0.0213,0.0209,0.0206,0.0203,0.0187,0.0173,0.0162,0.0152,0.0142,0.0132,0.0123,0.0115,0.0105,0.0097,0.0090,0.0084,0.0079,0.0075,0.0072,0.0070,0.0068,0.0066,0.0066,0.0068,0.0070,0.0074,0.0078,0.0082,0.0087,0.0091,0.0093,0.0096,0.0098,0.0100,0.0102,0.0103,0.0105,0.0107,0.0109,0.0110},
    {0.0235,0.0226,0.0217,0.0210,0.0205,0.0201,0.0197,0.0194,0.0178,0.0163,0.0150,0.0140,0.0132,0.0123,0.0114,0.0107,0.0099,0.0091,0.0085,0.0080,0.0076,0.0073,0.0070,0.0068,0.0067,0.0065,0.0065,0.0065,0.0067,0.0069,0.0072,0.0075,0.0078,0.0081,0.0083,0.0086,0.0089,0.0091,0.0093,0.0095,0.0097,0.0099,0.0101,0.0102},
    {0.0229,0.0219,0.0211,0.0203,0.0198,0.0194,0.0190,0.0186,0.0169,0.0154,0.0140,0.0130,0.0121,0.0112,0.0104,0.0096,0.0088,0.0081,0.0075,0.0070,0.0066,0.0062,0.0059,0.0057,0.0056,0.0054,0.0053,0.0054,0.0055,0.0057,0.0060,0.0062,0.0065,0.0068,0.0071,0.0074,0.0077,0.0080,0.0082,0.0084,0.0086,0.0088,0.0090,0.0092},
    {0.0233,0.0223,0.0215,0.0208,0.0203,0.0199,0.0195,0.0192,0.0175,0.0160,0.0148,0.0137,0.0128,0.0119,0.0110,0.0102,0.0093,0.0085,0.0078,0.0072,0.0068,0.0064,0.0060,0.0058,0.0056,0.0054,0.0053,0.0054,0.0056,0.0058,0.0061,0.0065,0.0068,0.0072,0.0076,0.0079,0.0083,0.0085,0.0087,0.0089,0.0091,0.0093,0.0095,0.0097},
    {0.0243,0.0234,0.0226,0.0220,0.0215,0.0211,0.0208,0.0205,0.0189,0.0175,0.0164,0.0154,0.0144,0.0133,0.0123,0.0114,0.0104,0.0094,0.0086,0.0078,0.0072,0.0067,0.0063,0.0060,0.0057,0.0054,0.0053,0.0054,0.0057,0.0060,0.0065,0.0070,0.0075,0.0080,0.0085,0.0090,0.0094,0.0096,0.0098,0.0100,0.0102,0.0103,0.0105,0.0107},
    {0.0250,0.0241,0.0234,0.0228,0.0223,0.0219,0.0216,0.0213,0.0198,0.0185,0.0174,0.0165,0.0154,0.0142,0.0132,0.0122,0.0111,0.0100,0.0091,0.0083,0.0076,0.0070,0.0065,0.0061,0.0058,0.0055,0.0053,0.0054,0.0057,0.0061,0.0066,0.0071,0.0077,0.0083,0.0089,0.0095,0.0098,0.0101,0.0102,0.0104,0.0106,0.0108,0.0109,0.0111},
    {0.0241,0.0231,0.0223,0.0215,0.0210,0.0206,0.0202,0.0199,0.0183,0.0169,0.0157,0.0147,0.0137,0.0127,0.0118,0.0109,0.0100,0.0091,0.0083,0.0076,0.0071,0.0066,0.0062,0.0059,0.0057,0.0054,0.0053,0.0054,0.0055,0.0058,0.0062,0.0066,0.0070,0.0074,0.0079,0.0083,0.0087,0.0089,0.0091,0.0093,0.0095,0.0097,0.0099,0.0101},
    {0.0250,0.0241,0.0232,0.0225,0.0220,0.0216,0.0212,0.0209,0.0194,0.0180,0.0169,0.0159,0.0149,0.0138,0.0128,0.0118,0.0108,0.0097,0.0089,0.0081,0.0075,0.0069,0.0065,0.0061,0.0058,0.0055,0.0053,0.0054,0.0056,0.0059,0.0064,0.0069,0.0074,0.0079,0.0085,0.0090,0.0094,0.0096,0.0098,0.0099,0.0101,0.0103,0.0105,0.0107},
    {0.0238,0.0227,0.0217,0.0209,0.0203,0.0198,0.0194,0.0191,0.0174,0.0159,0.0146,0.0135,0.0126,0.0117,0.0108,0.0100,0.0092,0.0084,0.0077,0.0072,0.0067,0.0063,0.0060,0.0058,0.0056,0.0054,0.0053,0.0054,0.0055,0.0057,0.0060,0.0063,0.0066,0.0070,0.0073,0.0077,0.0080,0.0082,0.0085,0.0086,0.0089,0.0091,0.0093,0.0095},
    {0.0238,0.0227,0.0217,0.0209,0.0203,0.0198,0.0194,0.0191,0.0174,0.0159,0.0146,0.0135,0.0126,0.0117,0.0108,0.0100,0.0092,0.0084,0.0077,0.0072,0.0067,0.0063,0.0060,0.0058,0.0056,0.0054,0.0053,0.0054,0.0055,0.0057,0.0060,0.0063,0.0066,0.0070,0.0073,0.0077,0.0080,0.0082,0.0085,0.0086,0.0089,0.0091,0.0093,0.0095},
    {0.0250,0.0241,0.0232,0.0225,0.0220,0.0216,0.0212,0.0209,0.0194,0.0180,0.0169,0.0159,0.0149,0.0138,0.0128,0.0118,0.0108,0.0097,0.0089,0.0081,0.0075,0.0069,0.0065,0.0061,0.0058,0.0055,0.0053,0.0054,0.0056,0.0059,0.0064,0.0069,0.0074,0.0079,0.0085,0.0090,0.0094,0.0096,0.0098,0.0099,0.0101,0.0103,0.0105,0.0107},
    {0.0241,0.0231,0.0223,0.0215,0.0210,0.0206,0.0202,0.0199,0.0183,0.0169,0.0157,0.0147,0.0137,0.0127,0.0118,0.0109,0.0100,0.0091,0.0083,0.0076,0.0071,0.0066,0.0062,0.0059,0.0057,0.0054,0.0053,0.0054,0.0055,0.0058,0.0062,0.0066,0.0070,0.0074,0.0079,0.0083,0.0087,0.0089,0.0091,0.0093,0.0095,0.0097,0.0099,0.0101},
    {0.0250,0.0241,0.0234,0.0228,0.0223,0.0219,0.0216,0.0213,0.0198,0.0185,0.0174,0.0165,0.0154,0.0142,0.0132,0.0122,0.0111,0.0100,0.0091,0.0083,0.0076,0.0070,0.0065,0.0061,0.0058,0.0055,0.0053,0.0054,0.0057,0.0061,0.0066,0.0071,0.0077,0.0083,0.0089,0.0095,0.0098,0.0101,0.0102,0.0104,0.0106,0.0108,0.0109,0.0111},
    {0.0243,0.0234,0.0226,0.0220,0.0215,0.0211,0.0208,0.0205,0.0189,0.0175,0.0164,0.0154,0.0144,0.0133,0.0123,0.0114,0.0104,0.0094,0.0086,0.0078,0.0072,0.0067,0.0063,0.0060,0.0057,0.0054,0.0053,0.0054,0.0057,0.0060,0.0065,0.0070,0.0075,0.0080,0.0085,0.0090,0.0094,0.0096,0.0098,0.0100,0.0102,0.0103,0.0105,0.0107},
    {0.0233,0.0223,0.0215,0.0208,0.0203,0.0199,0.0195,0.0192,0.0175,0.0160,0.0148,0.0137,0.0128,0.0119,0.0110,0.0102,0.0093,0.0085,0.0078,0.0072,0.0068,0.0064,0.0060,0.0058,0.0056,0.0054,0.0053,0.0054,0.0056,0.0058,0.0061,0.0065,0.0068,0.0072,0.0076,0.0079,0.0083,0.0085,0.0087,0.0089,0.0091,0.0093,0.0095,0.0097},
    {0.0229,0.0219,0.0211,0.0203,0.0198,0.0194,0.0190,0.0186,0.0169,0.0154,0.0140,0.0130,0.0121,0.0112,0.0104,0.0096,0.0088,0.0081,0.0075,0.0070,0.0066,0.0062,0.0059,0.0057,0.0056,0.0054,0.0053,0.0054,0.0055,0.0057,0.0060,0.0062,0.0065,0.0068,0.0071,0.0074,0.0077,0.0080,0.0082,0.0084,0.0086,0.0088,0.0090,0.0092},
    {0.0235,0.0226,0.0217,0.0210,0.0205,0.0201,0.0197,0.0194,0.0178,0.0163,0.0150,0.0140,0.0132,0.0123,0.0114,0.0107,0.0099,0.0091,0.0085,0.0080,0.0076,0.0073,0.0070,0.0068,0.0067,0.0065,0.0065,0.0065,0.0067,0.0069,0.0072,0.0075,0.0078,0.0081,0.0083,0.0086,0.0089,0.0091,0.0093,0.0095,0.0097,0.0099,0.0101,0.0102},
    {0.0241,0.0233,0.0225,0.0218,0.0213,0.0209,0.0206,0.0203,0.0187,0.0173,0.0162,0.0152,0.0142,0.0132,0.0123,0.0115,0.0105,0.0097,0.0090,0.0084,0.0079,0.0075,0.0072,0.0070,0.0068,0.0066,0.0066,0.0068,0.0070,0.0074,0.0078,0.0082,0.0087,0.0091,0.0093,0.0096,0.0098,0.0100,0.0102,0.0103,0.0105,0.0107,0.0109,0.0110},
    {0.0235,0.0227,0.0219,0.0212,0.0207,0.0204,0.0200,0.0197,0.0181,0.0166,0.0154,0.0145,0.0135,0.0126,0.0118,0.0109,0.0101,0.0093,0.0086,0.0081,0.0077,0.0073,0.0071,0.0068,0.0067,0.0066,0.0065,0.0067,0.0069,0.0071,0.0075,0.0078,0.0080,0.0082,0.0085,0.0087,0.0090,0.0092,0.0094,0.0096,0.0098,0.0100,0.0102,0.0103},
    {0.0269,0.0258,0.0247,0.0238,0.0231,0.0226,0.0222,0.0218,0.0203,0.0189,0.0178,0.0168,0.0157,0.0146,0.0136,0.0126,0.0116,0.0107,0.0099,0.0093,0.0088,0.0084,0.0081,0.0079,0.0077,0.0077,0.0078,0.0081,0.0086,0.0091,0.0096,0.0100,0.0102,0.0104,0.0106,0.0108,0.0110,0.0112,0.0114,0.0115,0.0117,0.0118,0.0120,0.0121},
    {0.0326,0.0305,0.0285,0.0268,0.0256,0.0247,0.0239,0.0232,0.0215,0.0199,0.0187,0.0176,0.0164,0.0152,0.0141,0.0131,0.0121,0.0111,0.0103,0.0096,0.0091,0.0087,0.0085,0.0083,0.0081,0.0081,0.0083,0.0086,0.0091,0.0094,0.0095,0.0097,0.0098,0.0100,0.0102,0.0104,0.0107,0.0109,0.0110,0.0112,0.0113,0.0115,0.0117,0.0118},
    {0.0545,0.0486,0.0432,0.0390,0.0362,0.0343,0.0327,0.0313,0.0294,0.0278,0.0265,0.0251,0.0233,0.0215,0.0198,0.0182,0.0166,0.0152,0.0140,0.0132,0.0126,0.0123,0.0122,0.0122,0.0124,0.0130,0.0141,0.0150,0.0155,0.0158,0.0159,0.0160,0.0161,0.0162,0.0163,0.0164,0.0166,0.0167,0.0168,0.0169,0.0170,0.0171,0.0172,0.0174},
    {0.0424,0.0382,0.0347,0.0321,0.0305,0.0294,0.0285,0.0278,0.0263,0.0250,0.0240,0.0230,0.0215,0.0199,0.0185,0.0172,0.0159,0.0148,0.0139,0.0132,0.0129,0.0127,0.0126,0.0128,0.0130,0.0136,0.0146,0.0152,0.0153,0.0153,0.0154,0.0155,0.0156,0.0158,0.0159,0.0160,0.0162,0.0163,0.0164,0.0165,0.0166,0.0167,0.0169,0.0170},
    {0.0328,0.0319,0.0311,0.0305,0.0301,0.0298,0.0295,0.0293,0.0282,0.0273,0.0266,0.0260,0.0253,0.0246,0.0241,0.0236,0.0231,0.0228,0.0225,0.0223,0.0223,0.0222,0.0222,0.0223,0.0224,0.0225,0.0225,0.0225,0.0225,0.0226,0.0226,0.0227,0.0228,0.0229,0.0230,0.0231,0.0232,0.0233,0.0233,0.0234,0.0235,0.0236,0.0236,0.0237},
    {0.0557,0.0494,0.0441,0.0401,0.0375,0.0358,0.0344,0.0333,0.0317,0.0303,0.0292,0.0283,0.0275,0.0269,0.0263,0.0258,0.0254,0.0250,0.0248,0.0246,0.0245,0.0245,0.0245,0.0244,0.0244,0.0243,0.0243,0.0243,0.0243,0.0244,0.0244,0.0245,0.0246,0.0246,0.0247,0.0248,0.0249,0.0250,0.0251,0.0251,0.0252,0.0253,0.0253,0.0254},
    {0.0573,0.0536,0.0507,0.0485,0.0472,0.0464,0.0457,0.0452,0.0442,0.0434,0.0428,0.0416,0.0391,0.0372,0.0360,0.0355,0.0361,0.0380,0.0382,0.0381,0.0380,0.0379,0.0379,0.0378,0.0378,0.0378,0.0378,0.0378,0.0378,0.0378,0.0379,0.0379,0.0379,0.0380,0.0381,0.0381,0.0382,0.0382,0.0383,0.0383,0.0384,0.0384,0.0385,0.0385},
    {0.0468,0.0461,0.0455,0.0451,0.0448,0.0445,0.0443,0.0442,0.0435,0.0428,0.0424,0.0413,0.0389,0.0369,0.0358,0.0354,0.0360,0.0374,0.0373,0.0372,0.0371,0.0371,0.0370,0.0370,0.0370,0.0369,0.0369,0.0369,0.0370,0.0370,0.0370,0.0371,0.0371,0.0372,0.0372,0.0373,0.0373,0.0374,0.0375,0.0375,0.0375,0.0376,0.0376,0.0377},
    {0.0459,0.0455,0.0451,0.0448,0.0446,0.0444,0.0442,0.0441,0.0434,0.0428,0.0423,0.0412,0.0388,0.0369,0.0362,0.0360,0.0358,0.0356,0.0355,0.0354,0.0353,0.0353,0.0352,0.0352,0.0352,0.0351,0.0351,0.0351,0.0351,0.0352,0.0352,0.0353,0.0353,0.0354,0.0354,0.0355,0.0356,0.0356,0.0357,0.0357,0.0358,0.0358,0.0359,0.0359},
    {0.0466,0.0460,0.0455,0.0450,0.0448,0.0445,0.0443,0.0442,0.0435,0.0429,0.0424,0.0421,0.0418,0.0415,0.0413,0.0411,0.0409,0.0408,0.0407,0.0406,0.0405,0.0404,0.0404,0.0404,0.0404,0.0403,0.0403,0.0403,0.0403,0.0404,0.0404,0.0404,0.0405,0.0405,0.0406,0.0406,0.0407,0.0408,0.0408,0.0408,0.0409,0.0409,0.0410,0.0410},
  };



  int ipt = 0;
  int ieta = 0;
  for (int i=0; i<npt; i++) {
    if (pt >= _ptmin[i] && pt < _ptmax[i]) {
      ipt = i;
      break;
    }
  }
  for (int i=0; i<neta; i++) {
    if (eta >= _etamin[i] && eta < _etamax[i]) {
      ieta = i;
      break;
    }
  }

  jecUnc = _jecUnc[ieta][ipt];


}



// JEC unc from Summer13_V5_MC_Uncertainty_AK7PFchs.txt :
void AK7PFCHSJECunc(double pt, double eta, double& jecUnc)
{

  const int npt = 44;
  const int neta = 40;

  double _etamin[neta] = {
    -5.4,
    -5.0,
    -4.4,
    -4.0,
    -3.5,
    -3.0,
    -2.8,
    -2.6,
    -2.4,
    -2.2,
    -2.0,
    -1.8,
    -1.6,
    -1.4,
    -1.2,
    -1.0,
    -0.8,
    -0.6,
    -0.4,
    -0.2,
    0.0,
    0.2,
    0.4,
    0.6,
    0.8,
    1.0,
    1.2,
    1.4,
    1.6,
    1.8,
    2.0,
    2.2,
    2.4,
    2.6,
    2.8,
    3.0,
    3.5,
    4.0,
    4.4,
    5.0
  };

  double _etamax[neta] = {
    -5.0,
    -4.4,
    -4.0,
    -3.5,
    -3.0,
    -2.8,
    -2.6,
    -2.4,
    -2.2,
    -2.0,
    -1.8,
    -1.6,
    -1.4,
    -1.2,
    -1.0,
    -0.8,
    -0.6,
    -0.4,
    -0.2,
    0.0,
    0.2,
    0.4,
    0.6,
    0.8,
    1.0,
    1.2,
    1.4,
    1.6,
    1.8,
    2.0,
    2.2,
    2.4,
    2.6,
    2.8,
    3.0,
    3.5,
    4.0,
    4.4,
    5.0,
    5.4
  };

  double _ptmin[npt] = {
    9.0,
    11.0,
    13.5,
    16.5,
    19.5,
    22.5,
    26.0,
    30.0,
    34.5,
    40.0,
    46.0,
    52.5,
    60.0,
    69.0,
    79.0,
    90.5,
    105.5,
    123.5,
    143.0,
    163.5,
    185.0,
    208.0,
    232.5,
    258.5,
    286.0,
    331.0,
    396.0,
    468.5,
    549.5,
    639.0,
    738.0,
    847.5,
    968.5,
    1102.0,
    1249.5,
    1412.0,
    1590.5,
    1787.0,
    1945.0,
    2119.0,
    2369.0,
    2643.5,
    2945.0,
    3276.5
  };

  double _ptmax[npt] = {
    11.0,
    13.5,
    16.5,
    19.5,
    22.5,
    26.0,
    30.0,
    34.5,
    40.0,
    46.0,
    52.5,
    60.0,
    69.0,
    79.0,
    90.5,
    105.5,
    123.5,
    143.0,
    163.5,
    185.0,
    208.0,
    232.5,
    258.5,
    286.0,
    331.0,
    396.0,
    468.5,
    549.5,
    639.0,
    738.0,
    847.5,
    968.5,
    1102.0,
    1249.5,
    1412.0,
    1590.5,
    1787.0,
    1945.0,
    2119.0,
    2369.0,
    2643.5,
    2945.0,
    3276.5,
    5000.
  };

  double _jecUnc[neta][npt] = {
    {0.0550,0.0523,0.0500,0.0482,0.0470,0.0462,0.0456,0.0451,0.0442,0.0435,0.0429,0.0425,0.0421,0.0418,0.0415,0.0413,0.0411,0.0409,0.0408,0.0406,0.0406,0.0405,0.0404,0.0404,0.0404,0.0404,0.0403,0.0403,0.0404,0.0404,0.0404,0.0404,0.0405,0.0405,0.0406,0.0406,0.0407,0.0408,0.0408,0.0408,0.0409,0.0409,0.0410,0.0410},
    {0.0461,0.0456,0.0452,0.0448,0.0446,0.0444,0.0442,0.0441,0.0434,0.0428,0.0424,0.0412,0.0388,0.0369,0.0362,0.0360,0.0358,0.0356,0.0355,0.0354,0.0353,0.0353,0.0352,0.0352,0.0352,0.0351,0.0351,0.0351,0.0351,0.0352,0.0352,0.0353,0.0353,0.0354,0.0354,0.0355,0.0356,0.0356,0.0357,0.0357,0.0358,0.0358,0.0359,0.0359},
    {0.0695,0.0627,0.0569,0.0527,0.0502,0.0486,0.0474,0.0465,0.0452,0.0442,0.0434,0.0421,0.0395,0.0375,0.0362,0.0357,0.0363,0.0376,0.0374,0.0373,0.0372,0.0371,0.0371,0.0370,0.0370,0.0370,0.0370,0.0370,0.0370,0.0370,0.0370,0.0371,0.0371,0.0372,0.0372,0.0373,0.0373,0.0374,0.0375,0.0375,0.0375,0.0376,0.0376,0.0377},
    {0.1494,0.1262,0.1056,0.0891,0.0784,0.0710,0.0649,0.0601,0.0559,0.0524,0.0498,0.0472,0.0437,0.0409,0.0389,0.0379,0.0379,0.0392,0.0391,0.0388,0.0386,0.0384,0.0383,0.0382,0.0381,0.0380,0.0379,0.0379,0.0379,0.0379,0.0379,0.0379,0.0380,0.0380,0.0381,0.0381,0.0382,0.0382,0.0383,0.0383,0.0384,0.0384,0.0385,0.0385},
    {0.0883,0.0750,0.0638,0.0549,0.0490,0.0450,0.0416,0.0390,0.0362,0.0338,0.0319,0.0305,0.0293,0.0282,0.0273,0.0266,0.0260,0.0255,0.0251,0.0249,0.0247,0.0246,0.0246,0.0245,0.0245,0.0244,0.0243,0.0243,0.0244,0.0244,0.0244,0.0245,0.0246,0.0246,0.0247,0.0248,0.0249,0.0250,0.0251,0.0251,0.0252,0.0253,0.0253,0.0254},
    {0.0351,0.0335,0.0322,0.0313,0.0306,0.0302,0.0298,0.0295,0.0284,0.0274,0.0267,0.0260,0.0253,0.0246,0.0241,0.0236,0.0231,0.0228,0.0225,0.0224,0.0223,0.0222,0.0223,0.0223,0.0224,0.0225,0.0225,0.0225,0.0225,0.0226,0.0226,0.0227,0.0228,0.0229,0.0230,0.0231,0.0232,0.0233,0.0233,0.0234,0.0235,0.0236,0.0236,0.0237},
    {0.0795,0.0672,0.0565,0.0479,0.0423,0.0385,0.0354,0.0330,0.0303,0.0281,0.0264,0.0248,0.0229,0.0211,0.0195,0.0180,0.0165,0.0152,0.0142,0.0135,0.0131,0.0128,0.0128,0.0129,0.0131,0.0137,0.0147,0.0153,0.0153,0.0154,0.0154,0.0155,0.0157,0.0158,0.0159,0.0160,0.0162,0.0163,0.0164,0.0165,0.0166,0.0167,0.0169,0.0170},
    {0.1315,0.1110,0.0921,0.0765,0.0660,0.0585,0.0522,0.0470,0.0423,0.0382,0.0349,0.0321,0.0292,0.0264,0.0240,0.0218,0.0196,0.0176,0.0161,0.0149,0.0140,0.0135,0.0131,0.0130,0.0131,0.0135,0.0144,0.0152,0.0157,0.0159,0.0160,0.0160,0.0161,0.0162,0.0164,0.0165,0.0166,0.0167,0.0168,0.0169,0.0170,0.0171,0.0172,0.0174},
    {0.0886,0.0781,0.0677,0.0589,0.0525,0.0476,0.0434,0.0397,0.0359,0.0323,0.0294,0.0269,0.0246,0.0224,0.0204,0.0186,0.0168,0.0151,0.0137,0.0126,0.0117,0.0110,0.0104,0.0100,0.0096,0.0093,0.0091,0.0092,0.0095,0.0097,0.0098,0.0099,0.0100,0.0102,0.0103,0.0105,0.0107,0.0109,0.0111,0.0112,0.0114,0.0115,0.0117,0.0118},
    {0.0656,0.0583,0.0514,0.0456,0.0413,0.0381,0.0353,0.0328,0.0299,0.0272,0.0249,0.0230,0.0211,0.0193,0.0177,0.0162,0.0147,0.0133,0.0121,0.0112,0.0104,0.0098,0.0093,0.0090,0.0087,0.0084,0.0084,0.0085,0.0088,0.0093,0.0098,0.0102,0.0103,0.0105,0.0107,0.0108,0.0110,0.0112,0.0114,0.0115,0.0117,0.0118,0.0120,0.0122},
    {0.0244,0.0234,0.0224,0.0216,0.0210,0.0206,0.0202,0.0198,0.0182,0.0168,0.0155,0.0145,0.0136,0.0127,0.0118,0.0110,0.0101,0.0093,0.0087,0.0081,0.0077,0.0073,0.0071,0.0069,0.0067,0.0066,0.0065,0.0067,0.0069,0.0071,0.0075,0.0078,0.0080,0.0082,0.0085,0.0087,0.0090,0.0092,0.0094,0.0096,0.0098,0.0100,0.0102,0.0103},
    {0.0246,0.0236,0.0227,0.0220,0.0214,0.0210,0.0206,0.0203,0.0188,0.0174,0.0162,0.0152,0.0142,0.0132,0.0123,0.0115,0.0106,0.0097,0.0090,0.0084,0.0079,0.0075,0.0072,0.0070,0.0068,0.0067,0.0066,0.0068,0.0070,0.0074,0.0078,0.0082,0.0087,0.0091,0.0093,0.0096,0.0098,0.0100,0.0102,0.0103,0.0105,0.0107,0.0109,0.0110},
    {0.0248,0.0235,0.0224,0.0215,0.0209,0.0204,0.0199,0.0196,0.0179,0.0164,0.0151,0.0141,0.0132,0.0123,0.0115,0.0107,0.0099,0.0092,0.0085,0.0080,0.0076,0.0073,0.0070,0.0068,0.0067,0.0065,0.0065,0.0066,0.0067,0.0069,0.0072,0.0075,0.0078,0.0081,0.0083,0.0086,0.0089,0.0091,0.0093,0.0095,0.0097,0.0099,0.0101,0.0102},
    {0.0264,0.0245,0.0229,0.0217,0.0208,0.0202,0.0196,0.0191,0.0174,0.0157,0.0143,0.0133,0.0123,0.0114,0.0106,0.0098,0.0090,0.0082,0.0076,0.0070,0.0066,0.0063,0.0060,0.0058,0.0056,0.0054,0.0054,0.0054,0.0055,0.0057,0.0060,0.0062,0.0065,0.0068,0.0071,0.0074,0.0077,0.0080,0.0082,0.0084,0.0086,0.0088,0.0090,0.0092},
    {0.0263,0.0246,0.0231,0.0220,0.0212,0.0206,0.0201,0.0196,0.0179,0.0163,0.0150,0.0140,0.0130,0.0120,0.0111,0.0103,0.0094,0.0086,0.0079,0.0073,0.0068,0.0064,0.0061,0.0058,0.0056,0.0054,0.0054,0.0054,0.0056,0.0058,0.0061,0.0065,0.0068,0.0072,0.0076,0.0079,0.0083,0.0085,0.0087,0.0089,0.0091,0.0093,0.0095,0.0097},
    {0.0268,0.0253,0.0240,0.0229,0.0222,0.0217,0.0212,0.0208,0.0192,0.0178,0.0166,0.0156,0.0145,0.0134,0.0124,0.0115,0.0104,0.0094,0.0086,0.0079,0.0073,0.0068,0.0063,0.0060,0.0057,0.0055,0.0053,0.0054,0.0057,0.0060,0.0065,0.0070,0.0075,0.0080,0.0085,0.0091,0.0094,0.0096,0.0098,0.0100,0.0102,0.0103,0.0105,0.0107},
    {0.0277,0.0261,0.0248,0.0237,0.0230,0.0225,0.0220,0.0216,0.0201,0.0187,0.0176,0.0166,0.0155,0.0144,0.0133,0.0123,0.0111,0.0101,0.0091,0.0083,0.0077,0.0071,0.0066,0.0062,0.0058,0.0055,0.0053,0.0054,0.0057,0.0061,0.0066,0.0071,0.0077,0.0083,0.0089,0.0095,0.0098,0.0101,0.0102,0.0104,0.0106,0.0108,0.0109,0.0111},
    {0.0297,0.0273,0.0252,0.0236,0.0226,0.0218,0.0212,0.0207,0.0190,0.0174,0.0161,0.0151,0.0140,0.0130,0.0120,0.0111,0.0101,0.0092,0.0084,0.0077,0.0072,0.0067,0.0063,0.0060,0.0057,0.0055,0.0053,0.0054,0.0056,0.0058,0.0062,0.0066,0.0070,0.0074,0.0079,0.0083,0.0087,0.0089,0.0091,0.0093,0.0095,0.0097,0.0099,0.0101},
    {0.0315,0.0288,0.0265,0.0248,0.0237,0.0229,0.0223,0.0217,0.0201,0.0186,0.0174,0.0163,0.0152,0.0140,0.0130,0.0120,0.0109,0.0099,0.0090,0.0082,0.0076,0.0070,0.0065,0.0062,0.0059,0.0055,0.0053,0.0054,0.0056,0.0060,0.0064,0.0069,0.0074,0.0079,0.0085,0.0090,0.0094,0.0096,0.0098,0.0099,0.0101,0.0103,0.0105,0.0107},
    {0.0317,0.0285,0.0259,0.0239,0.0225,0.0216,0.0208,0.0201,0.0183,0.0166,0.0152,0.0140,0.0130,0.0120,0.0111,0.0103,0.0094,0.0086,0.0079,0.0073,0.0068,0.0064,0.0061,0.0058,0.0056,0.0054,0.0053,0.0054,0.0055,0.0057,0.0060,0.0063,0.0066,0.0070,0.0073,0.0077,0.0080,0.0082,0.0085,0.0086,0.0089,0.0091,0.0093,0.0095},
    {0.0317,0.0285,0.0259,0.0239,0.0225,0.0216,0.0208,0.0201,0.0183,0.0166,0.0152,0.0140,0.0130,0.0120,0.0111,0.0103,0.0094,0.0086,0.0079,0.0073,0.0068,0.0064,0.0061,0.0058,0.0056,0.0054,0.0053,0.0054,0.0055,0.0057,0.0060,0.0063,0.0066,0.0070,0.0073,0.0077,0.0080,0.0082,0.0085,0.0086,0.0089,0.0091,0.0093,0.0095},
    {0.0315,0.0288,0.0265,0.0248,0.0237,0.0229,0.0223,0.0217,0.0201,0.0186,0.0174,0.0163,0.0152,0.0140,0.0130,0.0120,0.0109,0.0099,0.0090,0.0082,0.0076,0.0070,0.0065,0.0062,0.0059,0.0055,0.0053,0.0054,0.0056,0.0060,0.0064,0.0069,0.0074,0.0079,0.0085,0.0090,0.0094,0.0096,0.0098,0.0099,0.0101,0.0103,0.0105,0.0107},
    {0.0297,0.0273,0.0252,0.0236,0.0226,0.0218,0.0212,0.0207,0.0190,0.0174,0.0161,0.0151,0.0140,0.0130,0.0120,0.0111,0.0101,0.0092,0.0084,0.0077,0.0072,0.0067,0.0063,0.0060,0.0057,0.0055,0.0053,0.0054,0.0056,0.0058,0.0062,0.0066,0.0070,0.0074,0.0079,0.0083,0.0087,0.0089,0.0091,0.0093,0.0095,0.0097,0.0099,0.0101},
    {0.0277,0.0261,0.0248,0.0237,0.0230,0.0225,0.0220,0.0216,0.0201,0.0187,0.0176,0.0166,0.0155,0.0144,0.0133,0.0123,0.0111,0.0101,0.0091,0.0083,0.0077,0.0071,0.0066,0.0062,0.0058,0.0055,0.0053,0.0054,0.0057,0.0061,0.0066,0.0071,0.0077,0.0083,0.0089,0.0095,0.0098,0.0101,0.0102,0.0104,0.0106,0.0108,0.0109,0.0111},
    {0.0268,0.0253,0.0240,0.0229,0.0222,0.0217,0.0212,0.0208,0.0192,0.0178,0.0166,0.0156,0.0145,0.0134,0.0124,0.0115,0.0104,0.0094,0.0086,0.0079,0.0073,0.0068,0.0063,0.0060,0.0057,0.0055,0.0053,0.0054,0.0057,0.0060,0.0065,0.0070,0.0075,0.0080,0.0085,0.0091,0.0094,0.0096,0.0098,0.0100,0.0102,0.0103,0.0105,0.0107},
    {0.0263,0.0246,0.0231,0.0220,0.0212,0.0206,0.0201,0.0196,0.0179,0.0163,0.0150,0.0140,0.0130,0.0120,0.0111,0.0103,0.0094,0.0086,0.0079,0.0073,0.0068,0.0064,0.0061,0.0058,0.0056,0.0054,0.0054,0.0054,0.0056,0.0058,0.0061,0.0065,0.0068,0.0072,0.0076,0.0079,0.0083,0.0085,0.0087,0.0089,0.0091,0.0093,0.0095,0.0097},
    {0.0264,0.0245,0.0229,0.0217,0.0208,0.0202,0.0196,0.0191,0.0174,0.0157,0.0143,0.0133,0.0123,0.0114,0.0106,0.0098,0.0090,0.0082,0.0076,0.0070,0.0066,0.0063,0.0060,0.0058,0.0056,0.0054,0.0054,0.0054,0.0055,0.0057,0.0060,0.0062,0.0065,0.0068,0.0071,0.0074,0.0077,0.0080,0.0082,0.0084,0.0086,0.0088,0.0090,0.0092},
    {0.0248,0.0235,0.0224,0.0215,0.0209,0.0204,0.0199,0.0196,0.0179,0.0164,0.0151,0.0141,0.0132,0.0123,0.0115,0.0107,0.0099,0.0092,0.0085,0.0080,0.0076,0.0073,0.0070,0.0068,0.0067,0.0065,0.0065,0.0066,0.0067,0.0069,0.0072,0.0075,0.0078,0.0081,0.0083,0.0086,0.0089,0.0091,0.0093,0.0095,0.0097,0.0099,0.0101,0.0102},
    {0.0246,0.0236,0.0227,0.0220,0.0214,0.0210,0.0206,0.0203,0.0188,0.0174,0.0162,0.0152,0.0142,0.0132,0.0123,0.0115,0.0106,0.0097,0.0090,0.0084,0.0079,0.0075,0.0072,0.0070,0.0068,0.0067,0.0066,0.0068,0.0070,0.0074,0.0078,0.0082,0.0087,0.0091,0.0093,0.0096,0.0098,0.0100,0.0102,0.0103,0.0105,0.0107,0.0109,0.0110},
    {0.0244,0.0234,0.0224,0.0216,0.0210,0.0206,0.0202,0.0198,0.0182,0.0168,0.0155,0.0145,0.0136,0.0127,0.0118,0.0110,0.0101,0.0093,0.0087,0.0081,0.0077,0.0073,0.0071,0.0069,0.0067,0.0066,0.0065,0.0067,0.0069,0.0071,0.0075,0.0078,0.0080,0.0082,0.0085,0.0087,0.0090,0.0092,0.0094,0.0096,0.0098,0.0100,0.0102,0.0103},
    {0.0656,0.0583,0.0514,0.0456,0.0413,0.0381,0.0353,0.0328,0.0299,0.0272,0.0249,0.0230,0.0211,0.0193,0.0177,0.0162,0.0147,0.0133,0.0121,0.0112,0.0104,0.0098,0.0093,0.0090,0.0087,0.0084,0.0084,0.0085,0.0088,0.0093,0.0098,0.0102,0.0103,0.0105,0.0107,0.0108,0.0110,0.0112,0.0114,0.0115,0.0117,0.0118,0.0120,0.0122},
    {0.0886,0.0781,0.0677,0.0589,0.0525,0.0476,0.0434,0.0397,0.0359,0.0323,0.0294,0.0269,0.0246,0.0224,0.0204,0.0186,0.0168,0.0151,0.0137,0.0126,0.0117,0.0110,0.0104,0.0100,0.0096,0.0093,0.0091,0.0092,0.0095,0.0097,0.0098,0.0099,0.0100,0.0102,0.0103,0.0105,0.0107,0.0109,0.0111,0.0112,0.0114,0.0115,0.0117,0.0118},
    {0.1315,0.1110,0.0921,0.0765,0.0660,0.0585,0.0522,0.0470,0.0423,0.0382,0.0349,0.0321,0.0292,0.0264,0.0240,0.0218,0.0196,0.0176,0.0161,0.0149,0.0140,0.0135,0.0131,0.0130,0.0131,0.0135,0.0144,0.0152,0.0157,0.0159,0.0160,0.0160,0.0161,0.0162,0.0164,0.0165,0.0166,0.0167,0.0168,0.0169,0.0170,0.0171,0.0172,0.0174},
    {0.0795,0.0672,0.0565,0.0479,0.0423,0.0385,0.0354,0.0330,0.0303,0.0281,0.0264,0.0248,0.0229,0.0211,0.0195,0.0180,0.0165,0.0152,0.0142,0.0135,0.0131,0.0128,0.0128,0.0129,0.0131,0.0137,0.0147,0.0153,0.0153,0.0154,0.0154,0.0155,0.0157,0.0158,0.0159,0.0160,0.0162,0.0163,0.0164,0.0165,0.0166,0.0167,0.0169,0.0170},
    {0.0351,0.0335,0.0322,0.0313,0.0306,0.0302,0.0298,0.0295,0.0284,0.0274,0.0267,0.0260,0.0253,0.0246,0.0241,0.0236,0.0231,0.0228,0.0225,0.0224,0.0223,0.0222,0.0223,0.0223,0.0224,0.0225,0.0225,0.0225,0.0225,0.0226,0.0226,0.0227,0.0228,0.0229,0.0230,0.0231,0.0232,0.0233,0.0233,0.0234,0.0235,0.0236,0.0236,0.0237},
    {0.0883,0.0750,0.0638,0.0549,0.0490,0.0450,0.0416,0.0390,0.0362,0.0338,0.0319,0.0305,0.0293,0.0282,0.0273,0.0266,0.0260,0.0255,0.0251,0.0249,0.0247,0.0246,0.0246,0.0245,0.0245,0.0244,0.0243,0.0243,0.0244,0.0244,0.0244,0.0245,0.0246,0.0246,0.0247,0.0248,0.0249,0.0250,0.0251,0.0251,0.0252,0.0253,0.0253,0.0254},
    {0.1494,0.1262,0.1056,0.0891,0.0784,0.0710,0.0649,0.0601,0.0559,0.0524,0.0498,0.0472,0.0437,0.0409,0.0389,0.0379,0.0379,0.0392,0.0391,0.0388,0.0386,0.0384,0.0383,0.0382,0.0381,0.0380,0.0379,0.0379,0.0379,0.0379,0.0379,0.0379,0.0380,0.0380,0.0381,0.0381,0.0382,0.0382,0.0383,0.0383,0.0384,0.0384,0.0385,0.0385},
    {0.0695,0.0627,0.0569,0.0527,0.0502,0.0486,0.0474,0.0465,0.0452,0.0442,0.0434,0.0421,0.0395,0.0375,0.0362,0.0357,0.0363,0.0376,0.0374,0.0373,0.0372,0.0371,0.0371,0.0370,0.0370,0.0370,0.0370,0.0370,0.0370,0.0370,0.0370,0.0371,0.0371,0.0372,0.0372,0.0373,0.0373,0.0374,0.0375,0.0375,0.0375,0.0376,0.0376,0.0377},
    {0.0461,0.0456,0.0452,0.0448,0.0446,0.0444,0.0442,0.0441,0.0434,0.0428,0.0424,0.0412,0.0388,0.0369,0.0362,0.0360,0.0358,0.0356,0.0355,0.0354,0.0353,0.0353,0.0352,0.0352,0.0352,0.0351,0.0351,0.0351,0.0351,0.0352,0.0352,0.0353,0.0353,0.0354,0.0354,0.0355,0.0356,0.0356,0.0357,0.0357,0.0358,0.0358,0.0359,0.0359},
    {0.0550,0.0523,0.0500,0.0482,0.0470,0.0462,0.0456,0.0451,0.0442,0.0435,0.0429,0.0425,0.0421,0.0418,0.0415,0.0413,0.0411,0.0409,0.0408,0.0406,0.0406,0.0405,0.0404,0.0404,0.0404,0.0404,0.0403,0.0403,0.0404,0.0404,0.0404,0.0404,0.0405,0.0405,0.0406,0.0406,0.0407,0.0408,0.0408,0.0408,0.0409,0.0409,0.0410,0.0410},
  };


  int ipt = 0;
  int ieta = 0;
  for (int i=0; i<npt; i++) {
    if (pt >= _ptmin[i] && pt < _ptmax[i]) {
      ipt = i;
      break;
    }
  }
  for (int i=0; i<neta; i++) {
    if (eta >= _etamin[i] && eta < _etamax[i]) {
      ieta = i;
      break;
    }
  }

  jecUnc = _jecUnc[ieta][ipt];

}


