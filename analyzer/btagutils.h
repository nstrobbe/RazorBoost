#include <vector>

#include "TH1F.h"
#include "TLorentzVector.h"

using namespace std;

// btag efficiencies and errors for FullSim:
void btagCSVLEEFull(int flavor, double pt, double eta, double& SFb, double& dSFb)
{

  const int n = 16;

  SFb = 0;
  dSFb = 0;
  
  // pt bins:
  float _ptmin[n] = {20, 30, 40, 50, 60, 70, 80, 100, 120, 160, 210, 260, 320, 400, 500, 600};
  float _ptmax[n] = {30, 40, 50, 60, 70, 80, 100, 120, 160, 210, 260, 320, 400, 500, 600, 800};

  // btag for b jets
  if (abs(flavor) == 5) {
    double _SFb_error[n] = {
      0.033299,
      0.0146768,
      0.013803,
      0.0170145,
      0.0166976,
      0.0137879,
      0.0149072,
      0.0153068,
      0.0133077,  
      0.0123737,
      0.0157152,
      0.0175161,
      0.0209241,
      0.0278605,
      0.0346928,
      0.0350099 };

    if (pt >= 20 and pt <= 800) {
      SFb = 0.997942*((1.+(0.00923753*pt))/(1.+(0.0096119*pt)));
      for (int i=0; i<n; i++) {
	if (pt >= _ptmin[i] and pt < _ptmax[i]) {
	  dSFb = _SFb_error[i];
	}
      }
    } else if (pt < 20) {
      pt = 20;
      SFb = 0.997942*((1.+(0.00923753*pt))/(1.+(0.0096119*pt)));
      dSFb = 2.*_SFb_error[0];
    } else if (pt > 800) {
      pt = 800;
      SFb = 0.997942*((1.+(0.00923753*pt))/(1.+(0.0096119*pt)));
      dSFb = 2.*_SFb_error[n-1];
    }
  } 
  // light jets
  else {
    double x = pt;
    if (pt < 20) x = 20;
    if (pt > 800) x = 800;
    if (eta >= 0.0 and eta < 0.5) {
      SFb = ((1.01177+(0.0023066*x))+(-4.56052e-06*(x*x)))+(2.57917e-09*(x*(x*x)));
    } else if (eta >= 0.5 and eta < 1.0) {
      SFb = ((0.975966+(0.00196354*x))+(-3.83768e-06*(x*x)))+(2.17466e-09*(x*(x*x)));
    } else if (eta >= 1.0 and eta < 1.5) {
      SFb = ((0.93821+(0.00180935*x))+(-3.86937e-06*(x*x)))+(2.43222e-09*(x*(x*x)));
    } else {
      SFb = ((1.00022+(0.0010998*x))+(-3.10672e-06*(x*x)))+(2.35006e-09*(x*(x*x)));
    }
    dSFb = 0.;
  }

  
}


void btagCSVMEEFull(int flavor, double pt, double eta, double& SFb, double& dSFb)
{

  const int n = 16;

  SFb = 0;
  dSFb = 0;
  
  // pt bins:
  float _ptmin[n] = {20, 30, 40, 50, 60, 70, 80, 100, 120, 160, 210, 260, 320, 400, 500, 600};
  float _ptmax[n] = {30, 40, 50, 60, 70, 80, 100, 120, 160, 210, 260, 320, 400, 500, 600, 800};

  // btag for b jets
  if (abs(flavor) == 5) {
    double _SFb_error[n] = {
      0.0415707,
      0.0204209,
      0.0223227,
      0.0206655,
      0.0199325,
      0.0174121,
      0.0202332,
      0.0182446,
      0.0159777,
      0.0218531,
      0.0204688,
      0.0265191,
      0.0313175,
      0.0415417,
      0.0740446,
      0.0596716 };

    if (pt >= 20 and pt <= 800) {
      SFb = (0.938887+(0.00017124*pt))+(-2.76366e-07*(pt*pt));
      for (int i=0; i<n; i++) {
	if (pt >= _ptmin[i] and pt < _ptmax[i]) {
	  dSFb = _SFb_error[i];
	}
      }
    } else if (pt < 20) {
      pt = 20;
      SFb = (0.938887+(0.00017124*pt))+(-2.76366e-07*(pt*pt));
      dSFb = 2.*_SFb_error[0];
    } else if (pt > 800) {
      pt = 800;
      SFb = (0.938887+(0.00017124*pt))+(-2.76366e-07*(pt*pt));
      dSFb = 2.*_SFb_error[n-1];
    }
  }
  // light jets
  else {
    double x = pt;
    if (pt < 20) x = 20;
    if (pt > 800) x = 800;
    if (eta >= 0.0 and eta < 0.8) {
      SFb = ((1.07541+(0.00231827*x))+(-4.74249e-06*(x*x)))+(2.70862e-09*(x*(x*x)));
    } else if (eta >= 0.8 and eta < 1.6) {
      SFb = ((1.05613+(0.00114031*x))+(-2.56066e-06*(x*x)))+(1.67792e-09*(x*(x*x)));
    } else {
      SFb = ((1.05625+(0.000487231*x))+(-2.22792e-06*(x*x)))+(1.70262e-09*(x*(x*x)));
    }
    dSFb = 0.;
  }
  
}



// btag efficiencies and errors for FastSim for CSVL:
void btagCSVLEEFast(int flavor, double pt, double eta, double& SFb, double& dSFb)
{

  const int n = 16;

  SFb = 0;
  dSFb = 0;
  
  // pt bins:

  float _ptmin[n] = {20, 30, 40, 50, 60, 70, 80, 100, 120, 160, 210, 260, 320, 400, 500, 600};
  float _ptmax[n] = {30, 40, 50, 60, 70, 80, 100, 120, 160, 210, 260, 320, 400, 500, 600, 800};

  // btag for truth b jets
  if (abs(flavor) == 5) {

    double _CF_b_average[] = {
      0.993664503098, 
      0.997118413448, 
      1.00000858307, 
      0.998138427734, 
      0.997954726219, 
      1.0033249855, 
      0.999196231365, 
      0.999721825123, 
      0.998062431812, 
      0.993349373341, 
      0.988520681858, 
      0.981488585472, 
      0.972151458263, 
      0.960148274899, 
      0.935311257839, 
      0.961525201797 };
    double _CF_b_average_err[] = {
      0.0109568009058, 
      0.00892906831917, 
      0.0087851305153, 
      0.00972810529415, 
      0.0115671651123, 
      0.0055218422074, 
      0.00654383727116, 
      0.0048027365678, 
      0.0053438270671, 
      0.00705538379872, 
      0.00924561697373, 
      0.0118125740901, 
      0.0161247628532, 
      0.0213089441994, 
      0.0257657699383, 
      0.0710000594278 };


    if (pt >= 20 and pt <= 800) {
      for (int i=0; i<n; i++) {
	if (pt >= _ptmin[i] and pt < _ptmax[i]) {
	  SFb = _CF_b_average[i];
	  dSFb = _CF_b_average_err[i];
	}
      }
    } else if (pt < 20) {
      pt = 20;
      SFb = _CF_b_average[0];
      dSFb = 2.*_CF_b_average_err[0];
    } else if (pt > 800) {
      pt = 800;
      SFb = _CF_b_average[0];
      dSFb = 2.*_CF_b_average_err[n-1];
    }
       
  } 
  // b mistag for truth c jets
  else if (abs(flavor) == 4) {

    double _CF_c_average[] = {
      0.984478831291, 
      0.987717688084, 
      1.00405836105, 
      0.998263418674, 
      1.00784921646, 
      1.0102981329, 
      1.01865899563, 
      1.01091706753, 
      1.01194953918, 
      1.000857234, 
      1.00599002838, 
      0.990680754185, 
      0.982108235359, 
      0.96217083931, 
      0.977991938591, 
      1.03476846218 };
    double _CF_c_average_err[] = {
      0.00100927514392, 
      0.00617611760766, 
      0.0130610319109, 
      0.00797113489247, 
      0.0120932482521, 
      0.0140709531737, 
      0.00682625764897, 
      0.00632568642574, 
      0.00959128912161, 
      0.0085168268945, 
      0.0186160023091, 
      0.0253776907935, 
      0.0101710517903, 
      0.0225251829717, 
      0.0209085208682, 
      0.229993369164 };

    if (pt >= 20 and pt <= 800) {
      for (int i=0; i<n; i++) {
	if (pt >= _ptmin[i] and pt < _ptmax[i]) {
	  SFb = _CF_c_average[i];
	  dSFb = _CF_c_average_err[i];
	}
      }
    } else if (pt < 20) {
      pt = 20;
      SFb = _CF_c_average[0];
      dSFb = 2.*_CF_c_average_err[0];
    } else if (pt > 800) {
      pt = 800;
      SFb = _CF_c_average[0];
      dSFb = 2.*_CF_c_average_err[n-1];
    }
       
  } 
  // b mistag for truth ucsg jets
  else {
    // for |eta| < 1.2
    if (fabs(eta) < 1.2) {
      double _CF_Cen_l_average[] = {
	0.671931028366, 
	0.788472294807, 
	0.965046703815, 
	1.05972146988, 
	1.13163208961, 
	1.13900196552, 
	1.12332582474, 
	1.13785779476, 
	1.16931283474, 
	1.13694798946, 
	1.1905798912, 
	1.21016633511, 
	1.25385832787, 
	1.31020259857, 
	1.5478143692, 
	1.58263671398 };
      double _CF_Cen_l_average_err[] = {
	0.293519939614, 
	0.213324542145, 
	0.181800000289, 
	0.0950938090648, 
	0.0847383043262, 
	0.0910949511445, 
	0.111109152659, 
	0.118146468813, 
	0.127213063032, 
	0.124779153939, 
	0.113078557908, 
	0.143404246919, 
	0.17744898108, 
	0.206663361067, 
	0.385719879854, 
	0.56688559583 };

      if (pt >= 20 and pt <= 800) {
	for (int i=0; i<n; i++) {
	  if (pt >= _ptmin[i] and pt < _ptmax[i]) {
	    SFb = _CF_Cen_l_average[i];
	    dSFb = _CF_Cen_l_average_err[i];
	  }
	}
      } else if (pt < 20) {
	pt = 20;
	SFb = _CF_Cen_l_average[0];
	dSFb = 2.*_CF_Cen_l_average_err[0];
      } else if (pt > 800) {
	pt = 800;
	SFb = _CF_Cen_l_average[0];
	dSFb = 2.*_CF_Cen_l_average_err[n-1];
      }
    }
    // for |eta| > 1.2
    else {
      double _CF_For_l_average[] = {
	0.953250348568, 
	1.03656172752, 
	1.12568819523, 
	1.13641119003, 
	1.15979087353, 
	1.1981549263, 
	1.22276306152, 
	1.27178037167, 
	1.31978642941, 
	1.34248173237, 
	1.42129004002, 
	1.49918079376, 
	1.6518008709, 
	1.75768911839, 
	2.13973045349, 
	2.4918756485 };
      double _CF_For_l_average_err[] = {
	0.0810352190615, 
	0.0108613404341, 
	0.0367269473303, 
	0.0405540015577, 
	0.0930149619733, 
	0.0804350988011, 
	0.0973195514871, 
	0.10021503023, 
	0.115361770021, 
	0.0937639867599, 
	0.167282870832, 
	0.192629144176, 
	0.128604390327, 
	0.561947314569, 
	0.294883413706, 
	1.34718663512 };

      if (pt >= 20 and pt <= 800) {
	for (int i=0; i<n; i++) {
	  if (pt >= _ptmin[i] and pt < _ptmax[i]) {
	    SFb = _CF_For_l_average[i];
	    dSFb = _CF_For_l_average_err[i];
	  }
	}
      } else if (pt < 20) {
	pt = 20;
	SFb = _CF_For_l_average[0];
	dSFb = 2.*_CF_For_l_average_err[0];
      } else if (pt > 800) {
	pt = 800;
	SFb = _CF_For_l_average[0];
	dSFb = 2.*_CF_For_l_average_err[n-1];
      }

    }

  } 

  
}




// btag efficiencies and errors for FastSim for CSVM:
void btagCSVMEEFast(int flavor, double pt, double eta, double& SFb, double& dSFb)
{

  const int n = 16;

  SFb = 0;
  dSFb = 0;
  
  // pt bins:

  float _ptmin[n] = {20, 30, 40, 50, 60, 70, 80, 100, 120, 160, 210, 260, 320, 400, 500, 600};
  float _ptmax[n] = {30, 40, 50, 60, 70, 80, 100, 120, 160, 210, 260, 320, 400, 500, 600, 800};

  // btag for truth b jets
  if (abs(flavor) == 5) {
    double _CF_b_average[n] = {
      0.962733864784, 
      0.970573425293, 
      0.98256868124, 
      0.989266812801, 
      0.987689971924, 
      0.998923659325, 
      0.991679012775, 
      0.9940969944, 
      0.989295661449, 
      0.981353878975, 
      0.967669308186, 
      0.95040678978, 
      0.928928077221, 
      0.906944334507, 
      0.876945734024, 
      0.917767047882 };
    double _CF_b_average_err[n] = {
      0.0260181701607, 
      0.0154812762734, 
      0.0153789442342, 
      0.0154847986653, 
      0.0135714074905, 
      0.0227187471548, 
      0.0129734739108, 
      0.0136435077109, 
      0.0148713548589, 
      0.01840957401, 
      0.0199149180981, 
      0.0228957179877, 
      0.0314412307726, 
      0.033912027676, 
      0.057451031885, 
      0.123532166482 };

    if (pt >= 20 and pt <= 800) {
      for (int i=0; i<n; i++) {
	if (pt >= _ptmin[i] and pt < _ptmax[i]) {
	  SFb = _CF_b_average[i];
	  dSFb = _CF_b_average_err[i];
	}
      }
    } else if (pt < 20) {
      pt = 20;
      SFb = _CF_b_average[0];
      dSFb = 2.*_CF_b_average_err[0];
    } else if (pt > 800) {
      pt = 800;
      SFb = _CF_b_average[0];
      dSFb = 2.*_CF_b_average_err[n-1];
    }
       
  } 
  // b mistag for truth c jets
  else if (abs(flavor) == 4) {

    double _CF_c_average[] = {
      0.938704848289, 
      0.954210639, 
      0.961997866631, 
      0.958955943584, 
      0.977162599564, 
      0.973846018314, 
      0.991183340549, 
      0.967045485973, 
      0.962050676346, 
      0.9363104105, 
      0.921064794064, 
      0.908532738686, 
      0.87743806839, 
      0.843527078629, 
      0.855088531971, 
      0.844529688358 };
    double _CF_c_average_err[] = {
      0.0178243611071, 
      0.0099687242946, 
      0.00431298538482, 
      0.00708289900002, 
      0.00751513533748, 
      0.01417955544, 
      0.0221240581063, 
      0.0196358629174, 
      0.0223272080895, 
      0.0292267866889, 
      0.049254188277, 
      0.0442623633286, 
      0.0574511872067, 
      0.0575143699322, 
      0.10258407115, 
      0.163447093603 };

    if (pt >= 20 and pt <= 800) {
      for (int i=0; i<n; i++) {
	if (pt >= _ptmin[i] and pt < _ptmax[i]) {
	  SFb = _CF_c_average[i];
	  dSFb = _CF_c_average_err[i];
	}
      }
    } else if (pt < 20) {
      pt = 20;
      SFb = _CF_c_average[0];
      dSFb = 2.*_CF_c_average_err[0];
    } else if (pt > 800) {
      pt = 800;
      SFb = _CF_c_average[0];
      dSFb = 2.*_CF_c_average_err[n-1];
    }
       
  } 
  // b mistag for truth ucsg jets
  else {
    // for |eta| < 1.2
    if (fabs(eta) < 1.2) {
      double _CF_Cen_l_average[] = {
	0.682043075562, 
	0.821280837059, 
	0.967660665512, 
	1.05402135849, 
	1.12585055828, 
	1.13137996197, 
	1.09406352043, 
	1.14267456532, 
	1.16305410862, 
	1.14481532574, 
	1.19965064526, 
	1.22156500816, 
	1.19697093964, 
	1.29652225971, 
	1.6358757019, 
	1.73088300228 };
      double _CF_Cen_l_average_err[] = {
	0.313594245172, 
	0.243365835432, 
	0.193255801213, 
	0.083380682087, 
	0.0845506053194, 
	0.0778296065823, 
	0.115759651647, 
	0.117455453234, 
	0.137607281912, 
	0.169691254585, 
	0.263406722305, 
	0.140874601242, 
	0.172364106509, 
	0.22326610247, 
	0.475978342234, 
	1.10186611303 };

      if (pt >= 20 and pt <= 800) {
	for (int i=0; i<n; i++) {
	  if (pt >= _ptmin[i] and pt < _ptmax[i]) {
	    SFb = _CF_Cen_l_average[i];
	    dSFb = _CF_Cen_l_average_err[i];
	  }
	}
      } else if (pt < 20) {
	pt = 20;
	SFb = _CF_Cen_l_average[0];
	dSFb = 2.*_CF_Cen_l_average_err[0];
      } else if (pt > 800) {
	pt = 800;
	SFb = _CF_Cen_l_average[0];
	dSFb = 2.*_CF_Cen_l_average_err[n-1];
      }
    }
    // for |eta| > 1.2
    else {
      double _CF_For_l_average[] = {
	0.998093605042, 
	1.08850896358, 
	1.20118439198, 
	1.17004549503, 
	1.19409108162, 
	1.16723918915, 
	1.30341672897, 
	1.34792208672, 
	1.36953449249, 
	1.39564085007, 
	1.55918598175, 
	1.67829239368, 
	1.76160264015, 
	1.99361467361, 
	2.87041759491, 
	4.02351331711 };
      double _CF_For_l_average_err[] = {
	0.086743769991, 
	0.0289869607314, 
	0.07555277158, 
	0.0735421875418, 
	0.0754685076621, 
	0.166280741806, 
	0.0313040218325, 
	0.1082575366, 
	0.142611842899, 
	0.195393123002, 
	0.272610317951, 
	0.235091859049, 
	0.153531150317, 
	0.620904746043, 
	2.57960480237, 
	1.08894797132 };

      if (pt >= 20 and pt <= 800) {
	for (int i=0; i<n; i++) {
	  if (pt >= _ptmin[i] and pt < _ptmax[i]) {
	    SFb = _CF_For_l_average[i];
	    dSFb = _CF_For_l_average_err[i];
	  }
	}
      } else if (pt < 20) {
	pt = 20;
	SFb = _CF_For_l_average[0];
	dSFb = 2.*_CF_For_l_average_err[0];
      } else if (pt > 800) {
	pt = 800;
	SFb = _CF_For_l_average[0];
	dSFb = 2.*_CF_For_l_average_err[n-1];
      }

    }

  } 

  
}
